name: Production Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true

env:
  FLUTTER_VERSION: '3.19.0'
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: Build Android Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Setup Firebase configuration
        run: |
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json

      - name: Setup Keystore
        run: |
          echo '${{ secrets.KEYSTORE_BASE64 }}' | base64 -d > android/app/keystore.jks
          echo "MYCARD_KEYSTORE_PATH=android/app/keystore.jks" >> $GITHUB_ENV
          echo "MYCARD_KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "MYCARD_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "MYCARD_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Build Android App Bundle
        run: |
          flutter build appbundle \
            --release \
            --obfuscate \
            --split-debug-info=build/app/outputs/symbols

      - name: Upload App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: android-release
          path: build/app/outputs/bundle/release/app-release.aab

      - name: Upload Debug Symbols
        uses: actions/upload-artifact@v3
        with:
          name: android-symbols
          path: build/app/outputs/symbols/

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f android/app/google-services.json
          rm -f android/app/keystore.jks

  build-ios:
    name: Build iOS Production
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Setup Firebase configuration
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}' > ios/Runner/GoogleService-Info.plist

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install

      - name: Build iOS IPA
        run: |
          flutter build ipa \
            --release \
            --obfuscate \
            --split-debug-info=build/ios/outputs/symbols \
            --export-options-plist=ios/ExportOptions.plist

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-release
          path: build/ios/ipa/*.ipa

      - name: Upload Debug Symbols
        uses: actions/upload-artifact@v3
        with:
          name: ios-symbols
          path: build/ios/outputs/symbols/

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f ios/Runner/GoogleService-Info.plist

  deploy-firebase:
    name: Deploy to Firebase App Distribution
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android artifact
        uses: actions/download-artifact@v3
        with:
          name: android-release
          path: ./artifacts/android

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: production-testers
          file: ./artifacts/android/app-release.aab
          releaseNotes: |
            Version: ${{ github.ref_name }}
            Commit: ${{ github.sha }}

  create-release:
    name: Create GitHub Release
    needs: [build-android, build-ios]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android artifact
        uses: actions/download-artifact@v3
        with:
          name: android-release
          path: ./artifacts/android

      - name: Download iOS artifact
        uses: actions/download-artifact@v3
        with:
          name: ios-release
          path: ./artifacts/ios

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/android/app-release.aab
            ./artifacts/ios/*.ipa
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

